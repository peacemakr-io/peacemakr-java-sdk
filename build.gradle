plugins {
    id 'java'
    id 'maven'
}

group 'io.peacemakr'
version '0.0.3'

sourceCompatibility = 1.7

repositories {
    flatDir {
        dirs "$rootProject.projectDir/libs"
    }
    mavenCentral()
}

dependencies {
    compile group: 'io.peacemakr.corecrypto', name: 'peacemakr-core-crypto', version: '0.2.2'
    compile group: 'log4j', name: 'log4j', version: '1.2.17'
    compile group: 'com.google.code.gson', name: 'gson', version: '2.8.5'
    compile group: 'com.squareup.okhttp', name: 'okhttp', version: '2.7.5'
    compile group: 'io.swagger', name: 'swagger-annotations', version: '1.5.22'
    compile group: 'io.gsonfire', name: 'gson-fire', version: '1.8.3'
    compile group: 'org.threeten', name: 'threetenbp', version: '1.4.0'
    //TODO: replace outdated library.
    compile group: 'com.squareup.okhttp', name: 'logging-interceptor', version: '2.7.5'
    // Starting java9 javax.annotation are excluded. Adding this for swagger code generation.
    compile group: 'javax.annotation', name: 'javax.annotation-api', version: '1.3.2'
    
    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile group: 'org.mockito', name: 'mockito-core', version: '2.1.0'
}

task writePom { 
    doLast {
        pom {
            project {
                inceptionYear '2018'
                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution 'io.peacemakr'
                    }
                }
            }
        }.writeTo("$buildDir/pom.xml")
    }
}

task javadocJar(type: Jar) {
    archiveClassifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    archiveClassifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives javadocJar, sourcesJar
}

// Task for Sonatype Nexus OSS: build, sign, and upload
uploadArchives {
    repositories {
        mavenDeployer {
            // Sign POM
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            // Destination
            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }
            // *-SNAPSHOT versions the snapshotRepository is used.
            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }
            pom.withXml { provider ->
                def builder = provider.asString()
                builder.length = 0
                builder << project.file("pom.xml").getText("utf-8")
            }
        }
    }


    // Signing
    apply plugin: 'signing'
    signing {
        sign configurations.archives
    }
}